name: Download and Commit Audio Albums

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'Root albums URL (with trailing slash). 省略可'
        required: false
        default: 'https://archive.org/download/Sharpnel-Discography/SHARPNELSOUND/albums/'
      targets:
        description: |
          ダウンロード対象をカンマ区切りで指定。
          - ディレクトリID（defaults to base_url + ID/）
          - 直接ファイルURL（.mp3, archive.orgディレクトリURL, Bandcamp URL など）
        required: false
      folder_name:
        description: 'albums/ 以下に作成するフォルダ名を指定。省略時は自動サブフォルダ'
        required: false

jobs:
  download-and-commit:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) Install tools
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq python3-pip ffmpeg zip
          pip3 install --user yt-dlp

      # 3) Set inputs
      - name: Set inputs
        run: |
          echo "BASE_URL=${{ github.event.inputs.base_url }}" >> $GITHUB_ENV
          echo "TARGETS=${{ github.event.inputs.targets }}" >> $GITHUB_ENV
          echo "FOLDER_NAME=${{ github.event.inputs.folder_name }}" >> $GITHUB_ENV

      # 4) Build identifiers.json
      - name: Fetch list of identifiers
        if: ${{ !github.event.inputs.targets }}
        run: |
          raw_ids=$(wget --spider -r -l1 -nd -np "$BASE_URL" 2>&1 \
            | grep '^--' | awk '{print $3}' \
            | grep -oP '[^/]+(?=/)' | sort -u)
          printf '%b\n' "${raw_ids[@]}" | jq -R . | jq -s . > identifiers.json

      # 5) Download audio files with retry
      - name: Download audio files
        run: |
          set -euo pipefail
          mkdir -p downloads
          AUDIO_EXTS=(mp3 flac ogg m4a wav aac opus wma)
          ACCEPT=$(printf ",*.%s" "${AUDIO_EXTS[@]}") && ACCEPT="${ACCEPT:1}"

          # choose targets
          if [ -n "$TARGETS" ]; then
            IFS=',' read -ra items <<< "$TARGETS"
          else
            mapfile -t items < <(jq -r '.[]' identifiers.json)
          fi

          download_with_retry() {
            cmd="$1"; max=5; i=0
            until [ $i -ge $max ]; do
              if eval "$cmd"; then
                return 0
              fi
              i=$((i+1))
              echo "Retrying ($i/$max)..."
              sleep 5
            done
            return 1
          }

          for raw in "${items[@]}"; do
            t="${raw//\"/}"
            subdir="${FOLDER_NAME:-${t%%.*}}"
            mkdir -p "downloads/$subdir"
            echo "→ Processing [$t]"
            if [[ "$t" =~ \.(mp3|flac|ogg|m4a|wav|aac|opus|wma)$ ]]; then
              cmd="wget -c --tries=3 --retry-connrefused -P downloads/$subdir \"$t\""
            elif [[ "$t" =~ archive\.org/download ]]; then
              cmd="wget -c -r -np -nd -A \"$ACCEPT\" -P downloads/$subdir \"$t\""
            elif [[ "$t" =~ bandcamp\.com ]]; then
              cmd="yt-dlp -x --audio-format mp3 -o \"downloads/$subdir/%(title)s.%(ext)s\" \"$t\""
            else
              url="${BASE_URL%/}/$t/"
              cmd="wget -c -r -np -nd -A \"$ACCEPT\" -P downloads/$subdir \"$url\""
            fi
            download_with_retry "$cmd" || echo "⚠ Failed to download $t"
          done

      # 6) Move to albums/
      - name: Move downloads to albums/
        run: |
          mkdir -p albums
          AUDIO_EXTS=(mp3 flac ogg m4a wav aac opus wma)
          for d in downloads/*; do
            name=$(basename "$d")
            mkdir -p "albums/$name"
            shopt -s nullglob
            for ext in "${AUDIO_EXTS[@]}"; do
              mv -u "$d"/*."$ext" "albums/$name/" || true
            done
          done

      # 7) Zip albums
      - name: Zip albums directory
        run: zip -r albums.zip albums

      # 8) Commit & push with retry
      - name: Commit & Push to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add albums/ albums.zip
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Add/update audio albums and zip ($(date +'%Y-%m-%d'))"
          for i in {1..5}; do
            if git push; then
              echo "Push succeeded."
              exit 0
            fi
            echo "Push failed, retrying ($i/5)..."
            sleep 5
          done
          echo "⚠ Failed to push after retries." >&2
          exit 1
