name: Audio Albums Workflow

on:
  workflow_dispatch:
    inputs:
      # 実行モード選択
      action:
        description: '実行モード: download → ダウンロード＆コミット／リリース移行、move_only → 既存 albums/ を Release に移動'
        required: true
        default: 'download'
        type: choice
        options:
          - download
          - move_only
      # 以下 download モード時のみ
      base_url:
        description: 'Root albums URL (with trailing slash). 省略可'
        required: false
        default: 'https://archive.org/download/Sharpnel-Discography/SHARPNELSOUND/albums/'
      targets:
        description: |
          ダウンロード対象をカンマ区切りで指定。
        required: false
      folder_name:
        description: 'albums/ 以下に作成するフォルダ名を指定。省略時は自動サブフォルダ'
        required: false
      destination:
        description: '配置先: repo → リポジトリにコミット／release → GitHub Release にアップロード＆削除'
        required: true
        default: 'repo'
        type: choice
        options:
          - repo
          - release

jobs:
  download-and-upload:
    if: ${{ github.event.inputs.action == 'download' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (with LFS)
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0
          lfs: true

      - name: Configure Git LFS Tracking
        run: |
          git config --global http.postBuffer 524288000
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999
          for ext in mp3 flac ogg m4a wav aac; do
            git lfs track "*.${ext}"
          done
          git add .gitattributes || true
          git commit -m "chore: track audio files via Git LFS" || echo "No changes"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq python3-pip ffmpeg
          pip3 install --user yt-dlp

      - name: Set inputs
        run: |
          echo "BASE_URL=${{ github.event.inputs.base_url }}" >> $GITHUB_ENV
          echo "TARGETS=${{ github.event.inputs.targets }}" >> $GITHUB_ENV
          echo "FOLDER_NAME=${{ github.event.inputs.folder_name }}" >> $GITHUB_ENV
          echo "DEST=${{ github.event.inputs.destination }}" >> $GITHUB_ENV

      - name: Fetch list of identifiers
        if: ${{ !github.event.inputs.targets }}
        id: list
        run: |
          raw_ids=$(wget --spider -r -l1 -nd -np "$BASE_URL" 2>&1 \
            | grep '^--' | awk '{print $3}' \
            | grep -oP '[^/]+(?=/)' | sort -u)
          printf '%b\n' "${raw_ids[@]}" | jq -R . | jq -s . > identifiers.json

      - name: Download audio files
        run: |
          set -euo pipefail
          mkdir -p downloads
          ACCEPT="*.mp3,*.flac,*.ogg,*.m4a,*.wav,*.aac"
          if [ -n "$TARGETS" ]; then
            IFS=',' read -ra items <<< "$TARGETS"
          else
            mapfile -t items < <(jq -r '.[]' identifiers.json)
          fi
          for raw in "${items[@]}"; do
            t="${raw//\"/}"
            subdir="${FOLDER_NAME:-${t%%.*}}"
            mkdir -p "downloads/$subdir"
            echo "→ processing $t → downloads/$subdir/"
            if [[ "$t" =~ \.(mp3|flac|ogg|m4a|wav|aac)$ ]]; then
              wget --content-disposition -q -P "downloads/$subdir" "$t"
            elif [[ "$t" =~ archive\.org/download ]]; then
              wget -r -np -nd -A "$ACCEPT" -P "downloads/$subdir" "$t"
            elif [[ "$t" =~ bandcamp\.com ]]; then
              ~/.local/bin/yt-dlp -x --audio-format mp3 \
                -o "downloads/$subdir/%(title)s.%(ext)s" "$t"
            else
              url="${BASE_URL%/}/$t/"
              if wget --spider --quiet "$url"; then
                wget -r -np -nd -A "$ACCEPT" -P "downloads/$subdir" "$url"
              else
                echo "⚠️ $url が存在しない"
              fi
            fi
          done

      - name: Move downloads to albums/
        run: |
          mkdir -p albums
          for d in downloads/*; do
            name=$(basename "$d")
            mkdir -p "albums/$name"
            shopt -s nullglob
            moved=false
            for ext in mp3 flac ogg m4a wav aac; do
              for f in "$d"/*."$ext"; do
                mv "$f" "albums/$name/" && moved=true
              done
            done
            $moved && echo "✔ moved albums/$name" || echo "⚠ no files in $d"
          done

      - name: Generate release tag
        if: env.DEST == 'release'
        run: echo "RELEASE_TAG=audio-$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Generate file list
        if: env.DEST == 'release'
        id: file_list
        run: |
          # 改行区切りでファイル一覧を取得し、カンマ区切りに変換
          files=$(find albums -type f \( -iname '*.mp3' -o -iname '*.flac' -o -iname '*.ogg' -o -iname '*.m4a' -o -iname '*.wav' -o -iname '*.aac' \) \
            -print | paste -sd "," -)
          echo "FILES=$files" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: env.DEST == 'release'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Audio Assets ${{ env.RELEASE_TAG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload albums to Release
        if: env.DEST == 'release'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove albums/ in repo
        if: env.DEST == 'release'
        run: |
          git rm -r --ignore-unmatch albums
          git commit -m "chore: remove albums/ after uploading to Release" || echo "No albums to remove"

      - name: Commit & Push (repo destination)
        if: env.DEST == 'repo'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add albums/
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add audio files ($(date +'%Y-%m-%d'))"
          fi

      - name: Push changes
        run: |
          git pull --rebase origin "$GITHUB_REF_NAME" || true
          git push

  move-to-release:
    if: ${{ github.event.inputs.action == 'move_only' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (with LFS)
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0
          lfs: true

      - name: Generate release tag
        run: echo "RELEASE_TAG=move-albums-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Generate file list
        id: file_list
        run: |
          files=$(find albums -type f \( -iname '*.mp3' -o -iname '*.flac' -o -iname '*.ogg' -o -iname '*.m4a' -o -iname '*.wav' -o -iname '*.aac' \) \
            -print | paste -sd "," -)
          echo "FILES=$files" >> $GITHUB_ENV

      - name: Create GitHub Release for existing albums
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Move Albums ${{ env.RELEASE_TAG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload all album files to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove albums/ and commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git rm -r --ignore-unmatch albums
          git commit -m "chore: move albums to release ${{ env.RELEASE_TAG }}" || echo "No albums to remove"

      - name: Push changes
        run: |
          git pull --rebase origin "${GITHUB_REF_NAME}" || true
          git push
