name: Download and Upload Audio Albums as Release Asset

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'Root albums URL (with trailing slash). ÁúÅÁï•ÂèØ'
        required: false
        default: 'https://archive.org/download/Sharpnel-Discography/SHARPNELSOUND/albums/'
      targets:
        description: |
          „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂØæË±°„Çí„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅßÊåáÂÆö„ÄÇ
          - „Éá„Ç£„É¨„ÇØ„Éà„É™ID
          - Áõ¥Êé•„Éï„Ç°„Ç§„É´URL
        required: false
      folder_name:
        description: 'albums/ ‰ª•‰∏ã„Å´‰ΩúÊàê„Åô„Çã„Éï„Ç©„É´„ÉÄÂêç„ÄÇÁúÅÁï•ÊôÇ„ÅØËá™Âãï„Çµ„Éñ„Éï„Ç©„É´„ÉÄ'
        required: false

jobs:
  download-and-release:
    runs-on: ubuntu-latest
    steps:
      # 1) ÂøÖË¶Å„ÉÑ„Éº„É´„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq python3-pip ffmpeg zip
          pip3 install --user yt-dlp

      # 2) ÂÖ•Âäõ„Çí„Çª„ÉÉ„Éà
      - name: Set inputs
        run: |
          echo "BASE_URL=${{ github.event.inputs.base_url }}" >> $GITHUB_ENV
          echo "TARGETS=${{ github.event.inputs.targets }}" >> $GITHUB_ENV
          echo "FOLDER_NAME=${{ github.event.inputs.folder_name }}" >> $GITHUB_ENV

      # 3) identifiers.json ‰ΩúÊàêÔºàTARGETS Êú™ÊåáÂÆöÊôÇ„ÅÆ„ÅøÔºâ
      - name: Fetch list of identifiers
        if: ${{ !github.event.inputs.targets }}
        run: |
          raw_ids=$(wget --spider -r -l1 -nd -np "$BASE_URL" 2>&1 \
            | grep '^--' | awk '{print $3}' \
            | grep -oP '[^/]+(?=/)' | sort -u)
          printf '%b\n' "${raw_ids[@]}" | jq -R . | jq -s . > identifiers.json

      # 4) „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÔºàÂÜçÈñãÊ©üËÉΩ„Å§„ÅçÔºâ
      - name: Download audio files
        run: |
          set -euo pipefail
          mkdir -p downloads
          AUDIO_EXTS=(mp3 flac ogg m4a wav aac opus wma)
          ACCEPT=$(printf ",*.%s" "${AUDIO_EXTS[@]}") && ACCEPT="${ACCEPT:1}"

          # retry function
          retry(){ for i in 1 2 3 4 5; do "$@" && return; echo "Retry $i..."; sleep 5; done; false; }

          # targets list
          if [ -n "$TARGETS" ]; then
            IFS=',' read -ra items <<< "$TARGETS"
          else
            mapfile -t items < <(jq -r '.[]' identifiers.json)
          fi

          for raw in "${items[@]}"; do
            t="${raw//\"/}"
            subdir="${FOLDER_NAME:-${t%%.*}}"
            mkdir -p "downloads/$subdir"
            echo "‚Üí Processing $t"
            if [[ "$t" =~ \.(mp3|flac|ogg|m4a|wav|aac|opus|wma)$ ]]; then
              retry wget -c -P "downloads/$subdir" "$t"
            elif [[ "$t" =~ archive\.org/download ]]; then
              retry wget -c -r -np -nd -A "$ACCEPT" -P "downloads/$subdir" "$t"
            elif [[ "$t" =~ bandcamp\.com ]]; then
              retry yt-dlp -x --audio-format mp3 -o "downloads/$subdir/%(title)s.%(ext)s" "$t"
            else
              url="${BASE_URL%/}/$t/"
              retry wget -c -r -np -nd -A "$ACCEPT" -P "downloads/$subdir" "$url"
            fi
          done

      # 5) downloads ‚Üí albums „Å´ÁßªÂãï
      - name: Organize downloads into albums/
        run: |
          mkdir -p albums
          AUDIO_EXTS=(mp3 flac ogg m4a wav aac opus wma)
          for d in downloads/*; do
            name=$(basename "$d")
            mkdir -p "albums/$name"
            shopt -s nullglob
            for ext in "${AUDIO_EXTS[@]}"; do
              mv -u "$d"/*."$ext" "albums/$name/" || true
            done
          done

      # 6) ZIP Âåñ
      - name: Create albums.zip
        run: zip -r albums.zip albums

      # 7) Release „Çø„Ç∞ÁîüÊàê
      - name: Generate release tag
        run: echo "RELEASE_TAG=audio-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # 8) GitHub Release ‰ΩúÊàê
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Audio Albums ${{ env.RELEASE_TAG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9) Release Asset „Å®„Åó„Å¶ ZIP „Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
      - name: Upload albums.zip as Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: albums.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10) ÂÆå‰∫Ü„É≠„Ç∞
      - name: Done
        run: echo "üéâ Uploaded albums.zip to release ${{ env.RELEASE_TAG }}"
