name: Download and Upload Audio Albums via GigaFile

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'Root albums URL (with trailing slash). 省略可'
        required: false
        default: 'https://archive.org/download/Sharpnel-Discography/SHARPNELSOUND/albums/'
      targets:
        description: |
          ダウンロード対象をカンマ区切りで指定。
          - ディレクトリID（defaults to base_url + ID/）
          - 直接ファイルURL（.mp3, archive.orgディレクトリURL, Bandcamp URL など）
        required: false
      folder_name:
        description: 'albums/ 以下に作成するフォルダ名を指定。省略時は自動サブフォルダ'
        required: false

jobs:
  download-and-upload:
    runs-on: ubuntu-latest
    steps:
      # 1) リポジトリをチェックアウト（LFS は使いません）
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) 必要ツールのインストール
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq python3-pip ffmpeg zip
          pip3 install --user yt-dlp gigafile

      # 3) 入力値を環境変数にセット
      - name: Set inputs
        run: |
          echo "BASE_URL=${{ github.event.inputs.base_url }}" >> $GITHUB_ENV
          echo "TARGETS=${{ github.event.inputs.targets }}" >> $GITHUB_ENV
          echo "FOLDER_NAME=${{ github.event.inputs.folder_name }}" >> $GITHUB_ENV

      # 4) identifiers.json を作成（TARGETS 未指定時のみ）
      - name: Fetch list of identifiers
        if: ${{ !github.event.inputs.targets }}
        id: list
        run: |
          raw_ids=$(wget --spider -r -l1 -nd -np "$BASE_URL" 2>&1 \
            | grep '^--' | awk '{print $3}' \
            | grep -oP '[^/]+(?=/)' | sort -u)
          printf '%b\n' "${raw_ids[@]}" | jq -R . | jq -s . > identifiers.json

      # 5) オーディオファイルダウンロード処理
      - name: Download audio files
        run: |
          set -euo pipefail
          mkdir -p downloads
          ACCEPT="*.mp3,*.flac,*.ogg,*.m4a,*.wav,*.aac"

          if [ -n "$TARGETS" ]; then
            IFS=',' read -ra items <<< "$TARGETS"
          else
            mapfile -t items < <(jq -r '.[]' identifiers.json)
          fi

          for raw in "${items[@]}"; do
            t="${raw//\"/}"
            subdir="${FOLDER_NAME:-${t%%.*}}"
            mkdir -p "downloads/$subdir"
            echo "→ Processing [$t] → downloads/$subdir/"
            if [[ "$t" =~ \.(mp3|flac|ogg|m4a|wav|aac)$ ]]; then
              wget --content-disposition -q -P "downloads/$subdir" "$t"
            elif [[ "$t" =~ archive\.org/download ]]; then
              wget -r -np -nd -A "$ACCEPT" -P "downloads/$subdir" "$t"
            elif [[ "$t" =~ bandcamp\.com ]]; then
              ~/.local/bin/yt-dlp -x --audio-format mp3 \
                -o "downloads/$subdir/%(title)s.%(ext)s" "$t"
            else
              url="${BASE_URL%/}/$t/"
              if wget --spider --quiet "$url"; then
                wget -r -np -nd -A "$ACCEPT" -P "downloads/$subdir" "$url"
              else
                echo "⚠️ $url が存在しない"
              fi
            fi
          done

      # 6) downloads → albums/ へ移動（フォルダ名を保持）
      - name: Move downloads to albums/
        run: |
          mkdir -p albums
          for d in downloads/*; do
            name=$(basename "$d")
            mkdir -p "albums/$name"
            shopt -s nullglob
            moved=false
            for ext in mp3 flac ogg m4a wav aac; do
              for f in "$d"/*."$ext"; do
                mv "$f" "albums/$name/" && moved=true
              done
            done
            if $moved; then
              echo "✔ Moved albums/$name"
            else
              echo "⚠ No audio files in $d"
            fi
          done

      # 7) albums/ を ZIP 化
      - name: Zip albums directory
        run: |
          zip -r albums.zip albums

      # 8) GigaFile便へアップロードし、URL を取得
      - name: Upload albums.zip to GigaFile
        id: upload
        run: |
          UPLOAD_URL=$(gfile upload albums.zip | tail -n1)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      # 9) 結果 URL を出力
      - name: Show GigaFile URL
        run: |
          echo "🎉 Your download link: ${{ env.UPLOAD_URL }}"
