name: Download and Commit MP3 Albums

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: 'Root albums URL (with trailing slash). 省略可'
        required: false
        default: 'https://archive.org/download/Sharpnel-Discography/SHARPNELSOUND/albums/'
      targets:
        description: |
          ダウンロード対象をカンマ区切りで指定。
          - ディレクトリID（defaults to base_url + ID/）
          - 直接ファイルURL（.mp3, archive.orgディレクトリURL, Bandcamp URL など）
          省略時は base_url 以下すべてのディレクトリを取得して処理
        required: false
      folder_name:
        description: |
          albums/ 以下に作成するフォルダ名を指定。
          省略時は各ID やファイルに応じたサブフォルダを自動作成
        required: false

jobs:
  download-and-upload:
    runs-on: ubuntu-latest

    steps:
      # 1) リポジトリをフル履歴でチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2) Git の HTTP 設定を拡張
      - name: Configure Git HTTP settings
        run: |
          git config --global http.postBuffer 524288000
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999

      # 3) Git LFS をセットアップして *.mp3 を LFS 管理
      - name: Install Git LFS and track MP3
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install --local
          echo "*.mp3 filter=lfs diff=lfs merge=lfs -text" >> .gitattributes
          git add .gitattributes
          git commit -m "chore: track MP3 via Git LFS" || echo "No changes to .gitattributes"

      # 4) wget, jq, yt-dlp のインストール
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq python3-pip
          pip3 install --user yt-dlp

      # 5) 入力値を環境変数に設定
      - name: Set inputs as env vars
        run: |
          echo "BASE_URL=${{ github.event.inputs.base_url }}" >> $GITHUB_ENV
          echo "TARGETS=${{ github.event.inputs.targets }}" >> $GITHUB_ENV
          echo "FOLDER_NAME=${{ github.event.inputs.folder_name }}" >> $GITHUB_ENV

      # 6) identifiers.json を作る（targets未指定時のみ）
      - name: Fetch list of identifiers (if no TARGETS)
        if: ${{ !github.event.inputs.targets }}
        id: list
        run: |
          raw_ids=$(wget --spider -r -l1 -nd -np "$BASE_URL" 2>&1 \
            | grep '^--' \
            | awk '{print $3}' \
            | grep -oP '[^/]+(?=/$)' \
            | sort -u)

          decoded_ids=()
          for id in $raw_ids; do
            decoded=$(printf '%b' "${id//%/\\x}")
            decoded_ids+=("$decoded")
          done

          printf '%s\n' "${decoded_ids[@]}" | jq -R . | jq -s . > identifiers.json

      # 7) MP3 ダウンロード処理
      - name: Download MP3 files
        run: |
          set -euo pipefail
          mkdir -p downloads

          if [ -n "$TARGETS" ]; then
            IFS=',' read -ra items <<< "$TARGETS"
          else
            mapfile -t items < <(jq -r '.[]' identifiers.json)
          fi

          for item in "${items[@]}"; do
            target=$(echo "$item" | xargs)

            if [ -n "$FOLDER_NAME" ]; then
              subdir="$FOLDER_NAME"
            else
              if [[ "$target" =~ ^https?:// ]]; then
                subdir=$(basename "${target%/}")
                subdir="${subdir%%.*}"
              else
                subdir="$target"
              fi
            fi

            echo "→ Processing [$target] → albums/$subdir/"
            mkdir -p "downloads/$subdir"

            if [[ "$target" =~ \.mp3$ ]]; then
              # 直接MP3ファイルURL: Content-Disposition から正しい名前を取得
              wget --content-disposition -q -P "downloads/$subdir" "$target"

            elif [[ "$target" =~ archive\.org/download ]]; then
              # archive.org のディレクトリURL
              wget -r -np -nd -A '*.mp3' -P "downloads/$subdir" "$target"

            elif [[ "$target" =~ bandcamp\.com ]]; then
              # Bandcamp対応: yt-dlp でタイトルベースの名前を付与
              ~/.local/bin/yt-dlp -x --audio-format mp3 \
                -o "downloads/$subdir/%(title)s.%(ext)s" "$target"

            else
              # 単純ID → BASE_URL/ID/ から
              url="${BASE_URL%/}/$target/"
              if wget --spider --quiet "$url"; then
                wget -r -np -nd -A '*.mp3' -P "downloads/$subdir" "$url"
              else
                echo "⚠️ $url が存在しないかアクセス不可"
              fi
            fi
          done

      # 8) albums/ にコピー
      - name: Copy into repo
        run: |
          mkdir -p albums
          for d in downloads/*; do
            dir_name=$(basename "$d")
            mkdir -p "albums/${dir_name}"
            mv "$d"/*.mp3 "albums/${dir_name}/" \
              && echo "✔️ albums/${dir_name}/ に移動" \
              || echo "⚠️ $d にMP3がありませんでした"
          done

      # 9) コミット＆プッシュ
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add albums/
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add MP3s for new albums ($(date +'%Y-%m-%d'))"
            git push
          fi
